{"version":3,"file":"bundle.js","sources":["../node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","../node_modules/freeice/stun.json","../node_modules/freeice/turn.json","../lib/index.js","../lib/WebRtcPeer.js","../node_modules/freeice/index.js","../node_modules/freeice/node_modules/normalice/index.js"],"names":["WebRtcPeer","require","exports","defaultOnerror","error","console","noop","mode","localVideo","remoteVideo","onsdpoffer","onerror","videoStream","audioStream","Object","defineProperty","this","writable","stream","freeice","prototype","start","server","options","self","seoptionsrver","pc","RTCPeerConnection","src","URL","createObjectURL","muted","addStream","constraints","mandatory","OfferToReceiveAudio","undefined","OfferToReceiveVideo","createOffer","offer","log","setLocalDescription","ended","onicecandidate","e","candidate","offerSdp","localDescription","sdp","dispose","signalingState","close","getAudioTracks","forEach","track","stop","getVideoTracks","userMediaConstraints","audio","video","maxWidth","maxFrameRate","minFrameRate","processSdpAnswer","sdpAnswer","successCallback","answer","RTCSessionDescription","type","setRemoteDescription","getRemoteStreams","iceServers","optional","DtlsSrtpKeyAgreement","onSdp","mediaConstraints","wp","getUserMedia","userStream","startRecvOnly","onError","startSendOnly","startSendRecv","module","normalice","opts","getServers","count","idx","out","input","concat","servers","length","Math","random","splice","map","url","selected","stun","turn","stunCount","turnCount","protocols","protocol","parts","output","String","trim","indexOf","slice","split","username","credential","urls"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports=[\n  \"stun.l.google.com:19302\",\n  \"stun1.l.google.com:19302\",\n  \"stun2.l.google.com:19302\",\n  \"stun3.l.google.com:19302\",\n  \"stun4.l.google.com:19302\",\n  \"stun.ekiga.net\",\n  \"stun.ideasip.com\",\n  \"stun.rixtelecom.se\",\n  \"stun.schlund.de\",\n  \"stun.stunprotocol.org:3478\",\n  \"stun.voiparound.com\",\n  \"stun.voipbuster.com\",\n  \"stun.voipstunt.com\",\n  \"stun.voxgratia.org\",\n  \"stun.services.mozilla.com\"\n]\n","module.exports=[]\n","/*\n * (C) Copyright 2014 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser General Public License\n * (LGPL) version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n */\n\n/**\n * This module contains a set of reusable components that have been found useful\n * during the development of the WebRTC applications with Kurento.\n * \n * @module kurentoUtils\n * \n * @copyright 2014 Kurento (http://kurento.org/)\n * @license LGPL\n */\n\nvar WebRtcPeer = require('./WebRtcPeer');\n\nexports.WebRtcPeer = WebRtcPeer;\n","/*\n * (C) Copyright 2014 Kurento (http://kurento.org/)\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser General Public License\n * (LGPL) version 2.1 which accompanies this distribution, and is available at\n * http://www.gnu.org/licenses/lgpl-2.1.html\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n */\n\nvar freeice = require('freeice');\n\n/**\n * @description Default handler for error callbacks. The error messaged passed\n *              as argument is showed in a console, a div layer which should be\n *              previously created.\n *\n * @function defaultOnerror\n *\n * @param error -\n *            {String} Error message\n */\nfunction defaultOnerror(error) {\n\tif (error)\n\t\tconsole.error(error);\n}\n\nfunction noop() {\n};\n\n/**\n * @classdesc Wrapper object of an RTCPeerConnection. This object is aimed to\n *            simplify the development of WebRTC-based applications.\n *\n * @constructor module:kurentoUtils.WebRtcPeer\n *\n * @param mode -\n *            {String} Mode in which the PeerConnection will be configured.\n *            Valid values are: 'recv', 'send', and 'sendRecv'\n * @param localVideo -\n *            {Object} Video tag for the local stream\n * @param remoteVideo -\n *            {Object} Video tag for the remote stream\n * @param onsdpoffer -\n *            {Function} Callback executed when a SDP offer has been generated\n * @param onerror -\n *            {Function} Callback executed when an error happens generating an\n *            SDP offer\n * @param videoStream -\n *            {Object} MediaStream to be used as primary source (typically video\n *            and audio, or only video if combined with audioStream) for\n *            localVideo and to be added as stream to the RTCPeerConnection\n * @param audioStream -\n *            {Object} MediaStream to be used as second source (typically for\n *            audio) for localVideo and to be added as stream to the\n *            RTCPeerConnection\n */\nfunction WebRtcPeer(mode, localVideo, remoteVideo, onsdpoffer, onerror,\n\t\tvideoStream, audioStream) {\n\n\tObject.defineProperty(this, 'pc', {\n\t\twritable : true\n\t});\n\n\tthis.localVideo = localVideo;\n\tthis.remoteVideo = remoteVideo;\n\tthis.onerror = onerror || defaultOnerror;\n\tthis.stream = videoStream;\n\tthis.audioStream = audioStream;\n\tthis.mode = mode;\n\tthis.onsdpoffer = onsdpoffer || noop;\n}\n\n/**\n * @description This method creates the RTCPeerConnection object taking into\n *              account the properties received in the constructor. It starts\n *              the SDP negotiation process: generates the SDP offer and invokes\n *              the onsdpoffer callback. This callback is expected to send the\n *              SDP offer, in order to obtain an SDP answer from another peer.\n *\n * @function module:kurentoUtils.WebRtcPeer.prototype.start\n *\n */\nWebRtcPeer.prototype.start = function(server, options) {\n\n\tvar self = this;\n\n\tserver  = server  || this.server;\n\toptions = options || this.seoptionsrver;\n\n\tif (!this.pc) {\n\t\tthis.pc = new RTCPeerConnection(server, options);\n\t}\n\n\tvar pc = this.pc;\n\n\tif (this.stream && this.localVideo) {\n\t\tthis.localVideo.src = URL.createObjectURL(this.stream);\n\t\tthis.localVideo.muted = true;\n\t}\n\n\tif (this.stream) {\n\t\tpc.addStream(this.stream);\n\t}\n\n\tif (this.audioStream) {\n\t\tpc.addStream(this.audioStream);\n\t}\n\n\tthis.constraints = {\n\t\tmandatory : {\n\t\t\tOfferToReceiveAudio : (this.remoteVideo !== undefined),\n\t\t\tOfferToReceiveVideo : (this.remoteVideo !== undefined)\n\t\t}\n\t};\n\n\tpc.createOffer(function(offer) {\n\t\tconsole.log('Created SDP offer');\n\t\tpc.setLocalDescription(offer, function() {\n\t\t\tconsole.log('Local description set');\n\t\t}, self.onerror);\n\n\t}, this.onerror, this.constraints);\n\n\tvar ended = false;\n\tpc.onicecandidate = function(e) {\n\t\t// candidate exists in e.candidate\n\t\tif (e.candidate) {\n\t\t\tended = false;\n\t\t\treturn;\n\t\t}\n\n\t\tif (ended) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offerSdp = pc.localDescription.sdp;\n\t\tconsole.log('ICE negotiation completed');\n\n\t\tself.onsdpoffer(offerSdp, self);\n\t\t// self.emit('sdpoffer', offerSdp);\n\n\t\tended = true;\n\t};\n}\n\n/**\n * @description This method frees the resources used by WebRtcPeer.\n *\n * @function module:kurentoUtils.WebRtcPeer.prototype.dispose\n */\nWebRtcPeer.prototype.dispose = function() {\n\tconsole.log('Disposing WebRtcPeer');\n\n\t// FIXME This is not yet implemented in firefox\n\t// if (this.stream) this.pc.removeStream(this.stream);\n\n\t// For old browsers, PeerConnection.close() is NOT idempotent and raise\n\t// error. We check its signaling state and don't close it if it's already\n\t// closed\n\tif (this.pc && this.pc.signalingState != 'closed')\n\t\tthis.pc.close();\n\n\tif (this.localVideo)\n\t\tthis.localVideo.src = '';\n\tif (this.remoteVideo)\n\t\tthis.remoteVideo.src = '';\n\n\tif (this.stream) {\n\t\tthis.stream.getAudioTracks().forEach(function(track) {\n\t\t\ttrack.stop && track.stop()\n\t\t})\n\t\tthis.stream.getVideoTracks().forEach(function(track) {\n\t\t\ttrack.stop && track.stop()\n\t\t})\n\t}\n};\n\n/**\n * @description Default user media constraints considered when invoking the\n *              getUserMedia function. These values are: maxWidth=640,\n *              maxFrameRate=15, minFrameRate=15.\n *\n * @alias module:kurentoUtils.WebRtcPeer.prototype.userMediaConstraints\n */\nWebRtcPeer.prototype.userMediaConstraints = {\n\taudio : true,\n\tvideo : {\n\t\tmandatory : {\n\t\t\tmaxWidth : 640,\n\t\t\tmaxFrameRate : 15,\n\t\t\tminFrameRate : 15\n\t\t}\n\t}\n};\n\n/**\n * @description Callback function invoked when and SDP answer is received.\n *              Developers are expected to invoke this function in order to\n *              complete the SDP negotiation.\n *\n * @function module:kurentoUtils.WebRtcPeer.prototype.processSdpAnswer\n *\n * @param sdpAnswer -\n *            Description of sdpAnswer\n * @param successCallback -\n *            Called when the remoteDescription and the remoteVideo.src have\n *            been set successfully.\n */\nWebRtcPeer.prototype.processSdpAnswer = function(sdpAnswer, successCallback) {\n\tvar answer = new RTCSessionDescription({\n\t\ttype : 'answer',\n\t\tsdp : sdpAnswer,\n\t});\n\n\tconsole.log('SDP answer received, setting remote description');\n\tvar self = this;\n\tself.pc.setRemoteDescription(answer, function() {\n\t\tif (self.remoteVideo) {\n\t\t\tvar stream = self.pc.getRemoteStreams()[0];\n\t\t\tself.remoteVideo.src = URL.createObjectURL(stream);\n\t\t}\n\t\tif (successCallback) {\n\t\t\tsuccessCallback();\n\t\t}\n\t}, this.onerror);\n}\n\n/**\n * @description Default ICE server (stun:stun.l.google.com:19302).\n *\n * @alias module:kurentoUtils.WebRtcPeer.prototype.server\n */\nWebRtcPeer.prototype.server = {\n\ticeServers : freeice()\n};\n\n/**\n * @description Default options (DtlsSrtpKeyAgreement=true) for\n *              RTCPeerConnection.\n *\n * @alias module:kurentoUtils.WebRtcPeer.prototype.options\n */\nWebRtcPeer.prototype.options = {\n\toptional : [ {\n\t\tDtlsSrtpKeyAgreement : true\n\t} ]\n};\n\n/**\n * @description This method creates the WebRtcPeer object and obtain userMedia\n *              if needed.\n *\n * @function module:kurentoUtils.WebRtcPeer.start\n *\n * @param mode -\n *            {String} Mode in which the PeerConnection will be configured.\n *            Valid values are: 'recv', 'send', and 'sendRecv'\n * @param localVideo -\n *            {Object} Video tag for the local stream\n * @param remoteVideo -\n *            {Object} Video tag for the remote stream\n * @param onSdp -\n *            {Function} Callback executed when a SDP offer has been generated\n * @param onerror -\n *            {Function} Callback executed when an error happens generating an\n *            SDP offer\n * @param mediaConstraints -\n *            {Object[]} Constraints used to create RTCPeerConnection\n * @param videoStream -\n *            {Object} MediaStream to be used as primary source (typically video\n *            and audio, or only video if combined with audioStream) for\n *            localVideo and to be added as stream to the RTCPeerConnection\n * @param videoStream -\n *            {Object} MediaStream to be used as primary source (typically video\n *            and audio, or only video if combined with audioStream) for\n *            localVideo and to be added as stream to the RTCPeerConnection\n * @param audioStream -\n *            {Object} MediaStream to be used as second source (typically for\n *            audio) for localVideo and to be added as stream to the\n *            RTCPeerConnection\n *\n * @return {module:kurentoUtils.WebRtcPeer}\n */\nWebRtcPeer.start = function(mode, localVideo, remoteVideo, onSdp, onerror,\n\t\tmediaConstraints, videoStream, audioStream, server, options) {\n\tvar wp = new WebRtcPeer(mode, localVideo, remoteVideo, onSdp, onerror,\n\t\t\tvideoStream, audioStream);\n\n\tif (wp.mode !== 'recv' && !wp.stream) {\n\t\tvar constraints = mediaConstraints ? mediaConstraints\n\t\t\t\t: wp.userMediaConstraints;\n\n\t\tgetUserMedia(constraints, function(userStream) {\n\t\t\twp.stream = userStream;\n\t\t\twp.start(server, options);\n\t\t}, wp.onerror);\n\t} else {\n\t\twp.start(server, options);\n\t}\n\n\treturn wp;\n};\n\n/**\n * @description This methods creates a WebRtcPeer to receive video.\n *\n * @function module:kurentoUtils.WebRtcPeer.startRecvOnly\n *\n * @param remoteVideo -\n *            {Object} Video tag for the remote stream\n * @param onSdp -\n *            {Function} Callback executed when a SDP offer has been generated\n * @param onerror -\n *            {Function} Callback executed when an error happens generating an\n *            SDP offer\n * @param mediaConstraints -\n *            {Object[]} Constraints used to create RTCPeerConnection\n *\n * @return {module:kurentoUtils.WebRtcPeer}\n */\nWebRtcPeer.startRecvOnly = function(remoteVideo, onSdp, onError,\n\t\tmediaConstraints, server, options) {\n\treturn WebRtcPeer.start('recv', null, remoteVideo, onSdp, onError,\n\t\t\tmediaConstraints, server, options);\n};\n\n/**\n * @description This methods creates a WebRtcPeer to send video.\n *\n * @function module:kurentoUtils.WebRtcPeer.startSendOnly\n *\n * @param localVideo -\n *            {Object} Video tag for the local stream\n * @param onSdp -\n *            {Function} Callback executed when a SDP offer has been generated\n * @param onerror -\n *            {Function} Callback executed when an error happens generating an\n *            SDP offer\n * @param mediaConstraints -\n *            {Object[]} Constraints used to create RTCPeerConnection\n *\n * @return {module:kurentoUtils.WebRtcPeer}\n */\nWebRtcPeer.startSendOnly = function(localVideo, onSdp, onError,\n\t\tmediaConstraints, server, options) {\n\treturn WebRtcPeer.start('send', localVideo, null, onSdp, onError,\n\t\t\tmediaConstraints, server, options);\n};\n\n/**\n * @description This methods creates a WebRtcPeer to send and receive video.\n *\n * @function module:kurentoUtils.WebRtcPeer.startSendRecv\n *\n * @param localVideo -\n *            {Object} Video tag for the local stream\n * @param remoteVideo -\n *            {Object} Video tag for the remote stream\n * @param onSdp -\n *            {Function} Callback executed when a SDP offer has been generated\n * @param onerror -\n *            {Function} Callback executed when an error happens generating an\n *            SDP offer\n * @param mediaConstraints -\n *            {Object[]} Constraints used to create RTCPeerConnection\n *\n * @return {module:kurentoUtils.WebRtcPeer}\n */\nWebRtcPeer.startSendRecv = function(localVideo, remoteVideo, onSdp, onError,\n\t\tmediaConstraints, server, options) {\n\treturn WebRtcPeer.start('sendRecv', localVideo, remoteVideo, onSdp,\n\t\t\tonError, mediaConstraints, server, options);\n};\n\nmodule.exports = WebRtcPeer;\n","/* jshint node: true */\n'use strict';\n\nvar normalice = require('normalice');\n\n/**\n  # freeice\n\n  The `freeice` module is a simple way of getting random STUN or TURN server\n  for your WebRTC application.  The list of servers (just STUN at this stage)\n  were sourced from this [gist](https://gist.github.com/zziuni/3741933).\n\n  ## Example Use\n\n  The following demonstrates how you can use `freeice` with\n  [rtc-quickconnect](https://github.com/rtc-io/rtc-quickconnect):\n\n  <<< examples/quickconnect.js\n\n  As the `freeice` module generates ice servers in a list compliant with the\n  WebRTC spec you will be able to use it with raw `RTCPeerConnection`\n  constructors and other WebRTC libraries.\n\n  ## Hey, don't use my STUN/TURN server!\n\n  If for some reason your free STUN or TURN server ends up in the\n  list of servers ([stun](https://github.com/DamonOehlman/freeice/blob/master/stun.json) or\n  [turn](https://github.com/DamonOehlman/freeice/blob/master/turn.json))\n  that is used in this module, you can feel\n  free to open an issue on this repository and those servers will be removed\n  within 24 hours (or sooner).  This is the quickest and probably the most\n  polite way to have something removed (and provides us some visibility\n  if someone opens a pull request requesting that a server is added).\n\n  ## Please add my server!\n\n  If you have a server that you wish to add to the list, that's awesome! I'm\n  sure I speak on behalf of a whole pile of WebRTC developers who say thanks.\n  To get it into the list, feel free to either open a pull request or if you\n  find that process a bit daunting then just create an issue requesting\n  the addition of the server (make sure you provide all the details, and if\n  you have a Terms of Service then including that in the PR/issue would be\n  awesome).\n\n  ## I know of a free server, can I add it?\n\n  Sure, if you do your homework and make sure it is ok to use (I'm currently\n  in the process of reviewing the terms of those STUN servers included from\n  the original list).  If it's ok to go, then please see the previous entry\n  for how to add it.\n\n  ## Current List of Servers\n\n  * current as at the time of last `README.md` file generation\n\n  ### STUN\n\n  <<< stun.json\n\n  ### TURN\n\n  <<< turn.json\n\n**/\n\nvar freeice = module.exports = function(opts) {\n  // if a list of servers has been provided, then use it instead of defaults\n  var servers = {\n    stun: (opts || {}).stun || require('./stun.json'),\n    turn: (opts || {}).turn || require('./turn.json')\n  };\n\n  var stunCount = (opts || {}).stunCount || 2;\n  var turnCount = (opts || {}).turnCount || 0;\n  var selected;\n\n  function getServers(type, count) {\n    var out = [];\n    var input = [].concat(servers[type]);\n    var idx;\n\n    while (input.length && out.length < count) {\n      idx = (Math.random() * input.length) | 0;\n      out = out.concat(input.splice(idx, 1));\n    }\n\n    return out.map(function(url) {\n      return normalice(type + ':' + url);\n    });\n  }\n\n  // add stun servers\n  selected = [].concat(getServers('stun', stunCount));\n\n  if (turnCount) {\n    selected = selected.concat(getServers('turn', turnCount));\n  }\n\n  return selected;\n};\n","/**\n  # normalice\n\n  Normalize an ice server configuration object (or plain old string) into a format\n  that is usable in all browsers supporting WebRTC.  Primarily this module is designed\n  to help with the transition of the `url` attribute of the configuration object to\n  the `urls` attribute.\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\n\nvar protocols = [\n  'stun:',\n  'turn:'\n];\n\nmodule.exports = function(input) {\n  var url = (input || {}).url || input;\n  var protocol;\n  var parts;\n  var output = {};\n\n  // if we don't have a string url, then allow the input to passthrough\n  if (typeof url != 'string' && (! (url instanceof String))) {\n    return input;\n  }\n\n  // trim the url string, and convert to an array\n  url = url.trim();\n\n  // if the protocol is not known, then passthrough\n  protocol = protocols[protocols.indexOf(url.slice(0, 5))];\n  if (! protocol) {\n    return input;\n  }\n\n  // now let's attack the remaining url parts\n  url = url.slice(5);\n  parts = url.split('@');\n\n  output.username = input.username;\n  output.credential = input.credential;\n  // if we have an authentication part, then set the credentials\n  if (parts.length > 1) {\n    url = parts[1];\n    parts = parts[0].split(':');\n\n    // add the output credential and username\n    output.username = parts[0];\n    output.credential = (input || {}).credential || parts[1] || '';\n  }\n\n  output.url = protocol + url;\n  output.urls = [ output.url ];\n\n  return output;\n};\n"]}